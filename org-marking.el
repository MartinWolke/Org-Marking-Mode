;;; package -- Summary

;;; Commentary:

;;; Code:

(require 'org)
(require 'org-attach)
(require 'org-babel)
(require 'cl)

(defun parse-csv-file (file)
  "Transforms FILE into a list.
 Each element of the returned value is itself a list
containing all the elements from one line of the file.
This fn was stolen from somewhere on the web..."
  (interactive
   (list (read-file-name "CSV file: ")))
  (let ((buf (find-file-noselect file))
        (result nil))
    (with-current-buffer buf
      (goto-char (point-min))
      ;; (let ((header (buffer-substring-no-properties
      ;;              (line-beginning-position) (line-end-position))))
      ;;   (push ))
      (while (not (eobp))
        (let ((line (buffer-substring-no-properties
                     (line-beginning-position) (line-end-position))))
          ;; (let templist (split-string line ",")
          ;;      ;;(print templist)
          ;;      ;; (push (cons (car templist) (nth 1 templist) ) result)
          ;;      )
          (push (cons (nth 0 (split-string line ",")) (nth 1 (split-string line ","))) result)
          )
        (forward-line 1)))
    (reverse result)))

(defun parse-plist-csv-file (file)
  "Transforms into a plist.
Not using this yet, but I would like to switch over to using plists
for parsing csv files."
  (interactive
   (list (read-file-name "CSV file: ")))
  (let ((buf (find-file-noselect file))
        (result nil))
    (with-current-buffer buf
      (goto-char (point-min))
      (let ((header-props (split-string  (buffer-substring-no-properties
                                          (line-beginning-position) (line-end-position)) ","))
            )
        (message (format "header is: %s" header-props)) ;;(print header)
        (while (not (eobp))
          (let ((line  (split-string (buffer-substring-no-properties
                                      (line-beginning-position) (line-end-position)) ","))
                (count 0)
                (new-plist '()))
            ;;(print line)
            (while (< count (length line))
              (print (nth count header-props))
              (print (nth count line))
              (setq new-plist (plist-put new-plist  (nth count header-props) (nth count line)))
              (setq count (1+ count)))
            (push  new-plist result)
            (forward-line 1))))
      (reverse result))))
(define-minor-mode org-marking-mode
  "a mode to get my marking in order"
  ;;:keymap (kbd "C-c C-x C-g" . (call-interactively (org-set-property "GRADE")))
  :lighter " Mark"
  )
(add-hook 'org-marking-mode-hook
          (lambda ()
            (add-hook 'org-metareturn-hook 'mwp-insert-grade-template nil 'make-local
                      )))
(add-hook 'org-marking-mode-hook
          (lambda ()
            (add-hook 'org-metareturn-hook 'mwp-insert-grade-template nil 'make-local
                      )))
(add-hook 'org-marking-mode-hook 'org-contacts-setup-completion-at-point)

(defun org-marking-make-headings (assignments students)
  "Create a set of headlines for grading.
ASSIGNMENTS is an alist in which the key is the assignment title, 
and the value is the marking template.  STUDENTS is an ordinary list, usually 
generated by parse-csv-file, whose first element is the student name, and whose 
second is the student email."
  (save-excursion
    (goto-char (point-max))
    (mapcar (lambda (x)
              (let ((assignment (car x))
                    (template (cdr x)))
                (insert (format "\n* %s" assignment))
                (mapcar (lambda (stu)
                          (let ((name (car stu))
                                (email (cdr stu))
                                )
                            (insert (format "\n** %s" name))
                            (org-todo 'todo)
                            (insert template)
                            (org-set-property "GRADE" nil)
                            (org-set-property "MAIL_TO" email)
                            (org-set-property "MAIL_CC" "matt.price@utoronto.ca")
                            (org-set-property "MAIL_REPLY" "matt.price@utoronto.ca")
                            (org-set-property "MAIL_SUBJECT" (format "Comments on %s Assignment" (mwp-org-get-parent-headline)))
                            (save-excursion
                              (org-mark-subtree)
                              (org-cycle nil))
                            ))students) ) ) assignments)))

(defun org-marking-mail-all ()
  (interactive)
  "Mail all subtrees marked 'READY' to student recipients."
  (org-element-map (org-element-parse-buffer) 'headline
    (lambda (item)
      ;; (print (nth 0 (org-element-property :todo-keyword item)))
      (when (string= (org-element-property :todo-keyword item) "READY")
        (save-excursion
          (goto-char (org-element-property :begin item))
          ;;(print "sending")
          ;;(print item)
          (save-excursion
            (mwp-send-subtree-with-attachments)
            (message-send))
          (org-todo "SENT")
          ))
      )
    ))
(defun mwp-insert-grade-template ()
  "simply insert a short marking template after creation of level 2 headline.
I'm actualy not using this right now, but keeping temporarily until I'm sure it won't "
  (let ((element (org-element-at-point)))
    (save-excursion
      (when (and (org-element-type element)
                 (eq (org-element-property :level element) 2))
        (insert "
| Organization             |   |
| Clarity of Thesis        |   |
| Presentation of Evidence |   |
| Grammar and Spelling     |   |
| Style                    |   |
| Citations                |   |
| Further Comments         |   |
| Grade                    |   | 

")))))
(provide 'org-marking)
;;; org-marking ends here
